FROM tomcat:9.0
COPY target/*.war /usr/local/tomcat/webapps/ROOT.war
CMD ["Catalina","run"]

======================================================================================================================================

version: "3.9"
services:
  app:
    image: myprojectimage
    container_name: myproject_app
    ports:
      - "9090:8080"   # HostPort:ContainerPort, App accessible at http://localhost:9090
    environment:
      DB_HOST: db
      DB_USER: user
      DB_PASSWORD: password
      DB_NAME: mydb
    depends_on:
      - db

  db:
    image: mysql:8
    container_name: myproject_db
    environment:
      MYSQL_ROOT_PASSWORD: rootpassword
      MYSQL_DATABASE: mydb
      MYSQL_USER: user
      MYSQL_PASSWORD: password
    volumes:
      - db_data:/var/lib/mysql
    ports:
      - "3306:3306"   # Optional, only if you want to connect from host

volumes:
  db_data:

====================================================================================================================================

version: "3.9"

services:
  web:
    image: your image
    ports:
      - "8000:8080"
    depends_on:
      - mysql   

  mysql:
    image: mysql:8.0
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: university
      MYSQL_USER: user
      MYSQL_PASSWORD: password
    ports:
      - "3306:3306"
========================================================================================================================================

docker build -t lmsimage 

docker run -d -p 7089:8080 --name lmcontainer lmsimage

docker tag lmsimage kumbhambhargavi/lmsimage:latest

docker push kumbhambhargavi/lmsimage:latest

docker-compose up -d

docker exec -it myproject_db mysql -uuser -ppassword mydb

====================================================================================================================

SSH-Keygen: ssh-keygen -t rsa -C adityapanyalastudy@gmail.com

git:

config :

git config --global user.name "Your Name"
git config --global user.email "youremail@example.com"
git config --list

repo setup:

git remote -v 
git remote add origin <repo_url>
git remote remove origin
git remote set-url origin <new_url>

staging and commit:

git status → Check file states.
git add file.txt → Stage file.
git add . → Stage everything.
git reset file.txt → Unstage file but keep changes.
git commit -m "message" → Commit staged changes.
git commit --amend -m "new message" → Fix last commit message

fetching and pulling:

 git push origin main → Push local commits.
 git push -u origin main → Push & set upstream (first time).
 git pull origin main → Fetch + merge remote changes.
 git fetch origin → Download without merging.
 git fetch origin branch-name → Fetch specific branch.
 git rebase origin/main → Reapply local commits on top of remote.


branching:

 git branch → List branches.
 git branch branch-name → Create branch.
 git checkout branch-name → Switch branch.
 git checkout -b new-branch → Create & switch.
 git branch -d branch-name → Delete branch (safe).
 git branch -D branch-name → Force delete branch.
 git branch -r → List remote branches.
 git branch --merged → See merged branches.
 git remote prune origin → Remove deleted remote branches


merging and conflicts:

 git merge branch-name → Merge into current branch.

 Conflict resolution: open file, fix markers (
 bash
 git add file
 git commit
 <<<<<<< / 
======= / 
>>>>>>> ), then:

 git stash → Save changes temporarily.
 git stash apply → Restore stashed changes


undoing:

 git restore file.txt → Undo changes before staging.
 git reset file.txt → Remove from staging.
 git revert <commit_hash> → Create new commit that undoes a commit.
 git reflog → See history of HEAD, recover deleted branch.


history:

 git log → Full commit history.
 git log --oneline → Short history.
 git show <commit_hash> → Show details of commit.
 git diff → Show unstaged changes.
git blame file.txt → See who changed each line.

FROM openjdk:17

WORKDIR /app

COPY target/MyJavaProject-0.0.1-SNAPSHOT.jar /app/app.jar

CMD ["java", "-jar", "/app/app.jar"]

version: "3.9"

services:
  app:
    build: .
    container_name: mjpc
    depends_on:
      - db
    ports:
      - "8080:8080"   # expose your app on port 8080 (change if needed)

  db:
    image: postgres:15
    container_name: mjp-db
    restart: always
    environment:
      POSTGRES_USER: mjpuser
      POSTGRES_PASSWORD: mjppass
      POSTGRES_DB: mjpdb
    volumes:
      - db_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"   # PostgreSQL default port

volumes:
  db_data:

<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0
                             http://maven.apache.org/xsd/maven-4.0.0.xsd">

  <modelVersion>4.0.0</modelVersion>

  <parent>   
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-parent</artifactId>
    <version>3.2.5</version>
    <relativePath/> 
  </parent>

  <groupId>com.virtualevent</groupId>
  <artifactId>event-app</artifactId>
  <version>1.0-SNAPSHOT</version>
  <packaging>pom</packaging>
  <name>Virtual Event Application</name>
  <url>http://www.example.com</url>

  <properties>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <maven.compiler.source>11</maven.compiler.source>
    <maven.compiler.target>11</maven.compiler.target>
  </properties>

  <dependencyManagement>
    <dependencies>
     <dependency>
        <groupId>javax.servlet</groupId>
        <artifactId>javax.servlet-api</artifactId>
        <version>4.0.1</version>
        <scope>provided</scope>
      </dependency>
    </dependencies>
  </dependencyManagement>

  <dependencies>
    <dependency>
      <groupId>javax.servlet</groupId>
      <artifactId>javax.servlet-api</artifactId>
    </dependency>

    <dependency>
      <groupId>javax.servlet</groupId>
      <artifactId>jstl</artifactId>
      <version>1.2</version>
    </dependency>  
    <dependency>
      <groupId>org.junit.jupiter</groupId>
      <artifactId>junit-jupiter-api</artifactId>
      <version>5.0.0-M1</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.apache.commons</groupId>
      <artifactId>commons-lang3</artifactId>
      <version>3.12.0</version>
    </dependency>
  </dependencies>

  <build>
    <finalName>event-app</finalName>
    <plugins>
      <plugin>
        <artifactId>maven-compiler-plugin</artifactId>
        <version>3.1</version>
        <configuration>
          <source>${maven.compiler.source}</source>
          <target>${maven.compiler.target}</target>
        </configuration>
      </plugin>
      <plugin>
       <artifactId>maven-surefire-plugin</artifactId>
        <version>3.0.0-M7</version>
      </plugin>
      <plugin>
        <artifactId>maven-war-plugin</artifactId>
        <version>3.3.2</version>
      </plugin>
      <plugin>
        <artifactId>maven-jar-plugin</artifactId>
        <version>3.3.0</version>
        <configuration>
          <archive>
            <manifest>
              <mainClass>com.virtualevent.mainApp</mainClass>
            </manifest>
          </archive>
        </configuration>
      </plugin>
    </plugins>
  </build>
  <profiles>
    <profile>
      <id>prod</id>
      <properties>
        <project.build.sourceEncoding>ISO-8859-1</project.build.sourceEncoding>
      </properties>
    </profile>
  </profiles>
</project>
